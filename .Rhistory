swirl()
ls()
rm(ls())
rm(list = ls())
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head()
head(plants)
head(10)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1), 100, replace = TRUE, prob=c(.3,.7)) -> flips
flips
sum(flips)
?rbinom
rbinom(1, size=100, prob = .7)
rbinom(100, 1, .7)
rbinom(100, 1, .7) -> flips2
flips2
sum(flips2)
?rnorm()
?rnorm
rnorm(10)
rnorm(10, 100, 25)
rpois(5, 10)
replicae(100, rpois(5,10)) -> my_pois
replicate(100, rpois(5,10)) -> my_pois
my_pois
colMeans(my_pois) -> cm
his(cm)
hist(cm)
bye()
swirl()
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
?plot
plot(x = cars$dist, y = cars$speed, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist,  ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(cars, main ="My Plot")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col = 2)
plot(cars, xlim=c(10,15)0)
plot(cars, xlim=c(10,15))
plot(cars, pch = 2)
data(mtcars)
play()
str(mtcars)
nxt()
?boxplo
?boxplot
boxplot(formula = mpg~cyl, data = mtcars)
hist(mtcars$mpg)
library(ggplot2)
knitr::opts_chunk$set(echo = TRUE)
set.seed(151)
exponmean <- NULL
for (i in 1:1000) exponmean = c(exponmean,mean(rexp(40,rate=.2)))
exponmean <- (sqrt(40)*(exponmean-mean(exponmean)))/(var(exponmean))
hist(exponmean)
set.seed(151)
exponmean <- NULL
for (i in 1:1000) exponmean = c(exponmean,mean(rexp(40,rate=.2)))
exponmean <- (sqrt(40)*(exponmean-mean(exponmean)))/(sd(exponmean))
theoreticalmean <- (sqrt(40)*(exponmean-5))/sd(exponmean)
hist(exponmean)
hist(theoreticalmean)
par(mfrows=c(1,2))
par(mfrow=c(1,2))
hist(exponmean)
hist(theoreticalmean)
hist(exponmean)
par(mfrow=c(1,1))
hist(exponmean)
line(x=5)
abline(v=5)
?rbind
expondata <- data.frame("mean","sd")
View(expondata)
expondata <- NULL
?data.frame
expondata<-data.frame(colnames = c("mean","sd"))
expondata <- data.frame(mean = NULL, sd = NULL)
expondata$mean <- d
expondata$mean <- 1
set.seed(151)
exponmean <- NULL
exponvar<- NULL
for (i in 1:1000) {
j <- rexp(40, rate =.2)
exponmean<- c(exponmean,mean(j))
exponvar<- c(exponsd,var(j))
}
set.seed(151)
exponmean <- NULL
exponvar<- NULL
for (i in 1:1000) {
j <- rexp(40, rate =.2)
exponmean<- c(exponmean,mean(j))
exponvar<- c(exponvar,var(j))
}
expondata <- data.frame(mean=exponmean, var =exponvar)
expon <- rexp(1000,rate=.2)
hist(expondata$mean, main = "Distribution of Means", xlab= "Means of 40 random exponentials")
abline(v=5, col = "red", lwd=3)
1/.2^2
ggplot(expondata, aes(x=mean))+geom_histogram(binwidth=2, color = "blue", aes(y=..density..))+stat_function(fun=dnorm,color="red", args=list(mean(mean(expondata$mean),sd=sd(expondata$mean))))
ggplot(expondata, aes(x=mean))+geom_histogram(binwidth=3, color = "blue", aes(y=..density..))+stat_function(fun=dnorm,color="red", args=list(mean(mean(expondata$mean),sd=sd(expondata$mean))))
ggplot(expondata, aes(x=mean))+geom_histogram(binwidth=1, color = "blue", aes(y=..density..))+stat_function(fun=dnorm,color="red", args=list(mean(mean(expondata$mean),sd=sd(expondata$mean))))
ggplot(expondata, aes(x=mean))+geom_histogram(binwidth=1, color = "blue", aes(y=..density..,fill=..count..))+stat_function(fun=dnorm,color="red", args=list(mean(mean(expondata$mean),sd=sd(expondata$mean))))
ggplot(expondata, aes(x=mean))+geom_histogram(binwidth=.5, color = "blue", aes(y=..density..))+stat_function(fun=dnorm,color="red", args=list(mean(mean(expondata$mean),sd=sd(expondata$mean))))
ggplot(expondata, aes(x=mean))+geom_histogram(binwidth=.3, color = "blue", aes(y=..density..,fill=..count..))+stat_function(fun=dnorm,color="red", args=list(mean(mean(expondata$mean),sd=sd(expondata$mean))))
ggplot(expondata, aes(x=mean))+geom_histogram(binwidth=.3, color = "blue", aes(y=..density..,fill=..count..))+stat_function(fun=dnorm,color="red", args=list(mean(expondata$mean),sd=sd(expondata$mean))))
ggplot(expondata, aes(x=mean))+geom_histogram(binwidth=.3, color = "blue", aes(y=..density..,fill=..count..))+stat_function(fun=dnorm,color="red", args=list(mean(expondata$mean),sd=sd(expondata$mean))))
ggplot(expondata, aes(x=mean))+geom_histogram(binwidth=.3, color = "blue", aes(y=..density..,fill=..count..))+stat_function(fun=dnorm,color="red", args=list(mean(expondata$mean),sd=sd(expondata$mean)))
ggplot(expondata, aes(x=mean))+geom_histogram(binwidth=.3, color = "blue", aes(y=..density..,fill=..count..))+stat_function(fun=dnorm,color="red", args=list(mean=0, sd =1)
)
expondata$norm <- (sqrt(40)*(expondata$mean)-mean(expondata$mean))/(sdexpondata$mean)
expondata$norm <- (sqrt(40)*(expondata$mean)-mean(expondata$mean))/(sd(expondata$mean))
norjjids;j;fajdfdj;lds;sfkdsafkjsad
ddsfasdj;fj;adskfjk
weird
library(swirl)
swirl()
install_course("Practical Machine Learning")
install.packages("caret")
install.packages("ISLR")
library(ISLR)
library(caret)
data(Wage)
intrain <- createDataPartition(y=Wage$wage, p=.7, list = FALSE)
training <- Wage[intrain,]; testing <-Wage[-intrain,]
table(training$jobclass)
dummies <- dummyVars(wage ~ jobclass, data = training)
head(predict(dummies,newdata=training))
?predict
install.packages("splines")
install.packages("splines")
install.packages("doMC")
library(doMC)
doMC::registerDoMC(cores=4)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(CompressiveStrength, data=testing)
str(testing)
library(Hmisc)
str(testing$FineAggregate)
?seq_along()
seq_along(testing)
seq_len(testing)
seq_along(testing$CompressiveStrength)
testing$index <- seq_along(testing$CompressiveStrength)
testing$FlyAsh
training$index <- seq_along(training$CompressiveStrength)
cutAsh <- cut2(training$FlyAsh,g=3)
cutAge <- cut2(training$Age, g=4)
p1<- qplot(index,CompressiveStrength, data=training, fill = cutAsh)
p1
p1<- qplot(index,CompressiveStrength, data=training, fill = cutAsh, col=cutAsh)
p1
qplot(index,CompressiveStrength, data=training, fill = cutAge, col=cutAge)
hist(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,]
testing = adData[-inTrain,
]
str(testing)
ildata <- cbind(training$IL_11,training$IL_13,training$IL_16,training$IL_17E,training$IL_1alpha,training$IL_3,training$IL_4,training$IL_5,training$IL_6, training$IL_6_Receptor, training$IL_7, training$IL_8)
View(ildata)
ildata <- data.frame.labelled(training$IL_11,training$IL_13,training$IL_16,training$IL_17E,training$IL_1alpha,training$IL_3,training$IL_4,training$IL_5,training$IL_6, training$IL_6_Receptor, training$IL_7, training$IL_8)
ildata <- data.frame(IL11 =training$IL_11, IL13= training$IL_13, IL16= training$IL_16, IL17= training$IL_17E, ILalpha=training$IL_1alpha,IL3=training$IL_3,IL4=training$IL_4,IL5=training$IL_5,IL6=training$IL_6, IL6Receptor=training$IL_6_Receptor, IL7= training$IL_7, IL8=training$IL_8)
preProcess(ildata)
?preProcess
preProcess(ildata) -> pp
pp
preProcess(ildata, method="pca") -> pp
pp
preProcess(ildata, method="pca", thresh = .8) -> pp
pp
rm(list=ls())
set.seed(3433)data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433);data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]];training = adData[ inTrain,]
testing = adData[-inTrain,]
ildata <- data.frame(IL11 =training$IL_11, IL13= training$IL_13, IL16= training$IL_16, IL17= training$IL_17E, ILalpha=training$IL_1alpha,IL3=training$IL_3,IL4=training$IL_4,IL5=training$IL_5,IL6=training$IL_6, IL6Receptor=training$IL_6_Receptor, IL7= training$IL_7, IL8=training$IL_8)
ildatatrain <- ildata
prediction <- predict(ildatatrain)
ildatatrain <- data.frame(IL11 =training$IL_11, IL13= training$IL_13, IL16= training$IL_16, IL17= training$IL_17E, ILalpha=training$IL_1alpha,IL3=training$IL_3,IL4=training$IL_4,IL5=training$IL_5,IL6=training$IL_6, IL6Receptor=training$IL_6_Receptor, IL7= training$IL_7, IL8=training$IL_8, diagnosis=training$diagnosis)
myFit <- train(diagnosis~., data=ildatatrain)
myFit <- train(diagnosis~., data=ildatatrain, method="glm")
install.packages("e107m")
install.packages("e1071")
myFit <- train(diagnosis~., data=ildatatrain, method="glm")
myFit2 <- train(diagnosis~., data=ildatatrain, method="glm", preProcess="pca", trControl=trainControl(preProcOptions = list(thresh=.9)))
confusionMatrix(testing$diagnosis,predict(myFit))
ildatatest <- data.frame(IL11 =testing$IL_11, IL13= testing$IL_13, IL16= testing$IL_16, IL17= testing$IL_17E, ILalpha=training$IL_1alpha,IL3=training$IL_3,IL4=training$IL_4,IL5=training$IL_5,IL6=training$IL_6, IL6Receptor=training$IL_6_Receptor, IL7= training$IL_7, IL8=training$IL_8, diagnosis=training$diagnosis)
ildatatest <- data.frame(IL11 =testing$IL_11, IL13= testing$IL_13, IL16= testing$IL_16, IL17= testing$IL_17E, ILalpha=testing$IL_1alpha,IL3=testing$IL_3,IL4=testing$IL_4,IL5=testing$IL_5,IL6=testing$IL_6, IL6Receptor=testing$IL_6_Receptor, IL7= testing$IL_7, IL8=testing$IL_8, diagnosis=testing$diagnosis)
confusionMatrix(testing$diagnosis,predict(myFit))
confusionMatrix(ildatatest$diagnosis,predict(myFit, ildatatest))
confusionMatrix(ildatatest$diagnosis,predict(myFit2, ildatatest))
preProcess(ildata, method="pca", thresh = .9) -> pp
pp
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
rm(list=ls())
library(UsingR)
data(diamond)
g = ggplot(diamond, aes(x=carat, y = price),)
g = g+geom_point(size=6, colour = "black", alpha=.2)
g = g+geom_point(size=5, colour= "blue", alpha=.2)
g= g+geom_smooth(method="lm", colour="black")
g
fit <- lm(price~carat, data= diamond)
coef(fit)
fit
resid(fit)
fit2 <- lm(price~I(carat-mean(carat)), data=diamond)
coef(fit2)
mean(diamond$carat)
fit3 <- lm(price~I(carat*10), data=diamond)
coef(fit3)
newx <- c(.16,.27,.34)
coef(fit)[1]+coef(fit)[2] * newx
predict(fit, newdata=data.frame(carat=newx))
rm(fit)
rm(fit2)
rm(fit3)
rm(g)
rm(newx)
diamond$e <- resid(lm(price~carat,data=diamond))
g = ggplot(diamond, aes(x=carat,y=e))
g= g + geom_hline(yintercept=0,size=2)
g = g+geom_point(size=7, color="black", alpha=.5)
g
g = g +geom_point(size=5, colour="blue", alpha =.2)
g
example(anscombe)
?example
example(lm)
example("ggplot2")
example(ggplot)
set.seed(20)
example(set.seed)
example(names)
rm(list=ls())
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
fit <- lm(y~x)
coef(fit)
beta1<- cor(y,x)*sd(y)/sd(x)
beta0 <- mean(y)-beta1*mean(x)
e <- y - beta0 - beta1*x
sigma <- sqrt(sum(e^2)/(len(y)-2)
)
n <- length(y)
sigma <- sqrt(sum(e^2)/(n-2)
)
sigma <- sqrt(sum(e^2))/(n-2)
ssx <- sum((x-mean(x))^2)
seBeta0 <- (1/n+mean(x)^2/ssx)^.5*sigma
seBeta1 <- sigma/sqrt(ssx)
tBeta0 <-- beta0/seBeta0; tBeta1 <- beta1/seBeta1
pBeta1 <- 2*pt(abs(tbeta1),df=n-2, lower.tail = FALSE)
pBeta1 <- 2*pt(abs(tBeta1),df=n-2, lower.tail = FALSE)
pBeta1
pBeta1 <- 2*pt(abs(tBeta1),df=n-2)
pBeta1 <- 2*pt(abs(tBeta1),df=n-2, lower.tail= FALSE)
pBeta1 <- pt(abs(tBeta1),df=n-2, lower.tail= FALSE)
pBeta1
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
createDataPartition(segmentationOriginal$Case, p=.7) -> inData
training <- segmentationOriginal[,inData]
createDataPartition(segmentationOriginal$Case, p=.7, list = FALSE) -> inTrain
training <- segmentationOriginal[inTrain,]
test <- segmentationOriginal[-inTrain,]
set.seed(125)
?predict
?fit
?train
train(Case~., method="rpart")
train(Case~ . , data=training, method="rpart")
set.seed(125)
train(Case~ . , data=training, method="rpart") -> myFit
print(myFit)
?predict
predict(myFit)
library(rattle)
install.packages("rattle")
library(rattle)
install.packages("RGtk2")
)
install.packages("https://cran.r-project.org/src/contrib/Archive/RGtk2/RGtk2_2.20.31.tar.gz", repos=NULL)
)
install.packages("https://cran.r-project.org/src/contrib/Archive/RGtk2/RGtk2_2.20.31.tar.gz", repos=NULL)
install.packages("rattle")
install.packages("RGtk2")
install.packages("https://cran.r-project.org/src/contrib/Archive/RGtk2/RGtk2_2.20.31.tar.gz", repos=NULL)
install.packages("https://cran.r-project.org/src/contrib/Archive/RGtk2/RGtk2_2.20.31.tar.gz", repos=NULL)
install.packages("rattle")
library(rattle)
fancyRpartPlot(myFit$finalModel)
library(rpart)
fancyRpartPlot(myFit$finalModel)
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(myFit$finalModel)
myFit
str(segmentationOriginal)
set.seed(125)
myFit <- train(Class~., data=segmentationOriginal, method ="rpart")
fancyRpartPlot(myFit$finalModel)
library(pgmm)
install.packages("pgmm")
library(pgmm)
data(olive)
rm(list=ls())
data(olive)
olive = olive[,-1]
?tree
?t
?train
modFit <- train(Area~.,method="rpart",data=olive)
newdata = as.data.frame(t(colMeans(olive)))
predict(newdata,modFit)
?predict
predict(newdata$Area, modFit)
predict(modFit, newdata = as.data.frame(t(colMeans(olive))))
?olive
library(ElemStatLearn)
data(SAheart)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
formula <- chd ~ c(age,alcohol,obesity,tobacco,typea,lsl)
set.seed(13234)
modFit <- train(chd~c(age,alcohol,obesity,tobacco,typea,ldl),method="glm",family="binomial", data = trainSA)
modFit <- train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial", data = trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
misClass(testSA, predict(modFit,testSA))
missClass(testSA, predict(modFit,testSA))
missClass(trainSA, predict(modFit,trainSA))
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
predict(y~., data=vowel.train, method="rf")
modFit <- train(y~., data=vowel.train, method="rf")
randomForest(y~., data=vowel.train)
randomForest(y~., data=vowel.train) -> modFit
varImp(modFit)
order(varImp(modFit))
set.seed(33833)
randomForest(y~., data=vowel.train) -> modFit
order(varImp(modFit))
test set .31, train .27
21568493710
2.783
setwd("~/Documents/Data Science Specialization/Course 8: Practical Machine Learning/data_science_course8_project")
training <- read.csv("pml-training.csv")
training$classe
names(training)
library(caret)
?preProcess
training2 <- preProcess(training)
training2 <- predict.preProcess(training)
preProcess.predict(training)
predict.preProcess
?predict.preProcess
library(predict.preProcess)
predic.preProcess(training)
predict.preProcess(training)
training3 <- predict(training2, training)
View(training3)
rm(training2)
rm(training3)
View(training)
trainingnames <- data.frame(names(training))
View(trainingnames)
View(training)
actualtraining <- data.frame(training$classe, training$accel_arm_y, training$accel_arm_z, training$accel_belt_z, training$accel_dumbbell_y, training$accel_dumbbell_z, training$accel_forearm_y, training$accel_fore\
actualtraining <- data.frame(training$classe, training$accel_arm_y, training$accel_arm_z, training$accel_belt_z, training$accel_dumbbell_y, training$accel_dumbbell_z, training$accel_forearm_y, training$accel_forearm_z)
View(actualtraining)
actualtraining <- data.frame(training$classe, training$accel_arm_y, training$accel_arm_z, training$accel_belt_z, training$accel_dumbbell_y, training$accel_dumbbell_z, training$accel_forearm_y, training$accel_forearm_z, training$pitch_dumbbell)
mod1 <- train(y~., method = "rf", data = actualtraining)
mod1 <- train(classe~., method = "rf", data = actualtraining)
mod1 <- train(training.classe~., method = "rf", data = actualtraining)
tree <- train(training.classe~., method="rpart", data = actualtraining)
library(rattle)
fancyRpartPlot(tree$finalModel)
doMC::registerDoMC(cores=4)
mod1 <- train(training.classe~., method = "rf", data = actualtraining)
fancyRpartPlot(mod1$finalModel)
plot(mod1$finalModel)
testing <- read.csv("pml-testing.csv")
prediction<- predict(mod1, data=testing)
prediction
?predict
predict(mod1, testing)
names(actualtraining) <- gsub("training.",'',names(actualtraining))
View(actualtraining)
mod1 <- train(training.classe~., method = "rf", data = actualtraining)
mod1 <- train(classe~., method = "rf", data = actualtraining)
predict(mod1, testing)
prediction <- predict(mod1, testing)
confusionMatrix(prediction, testing$classe)
inData <- createDataPartition(training, times = 2)
inData <- createDataPartition(training$classe, times = 2)
inData <- createDataPartition(training$classe, times = 1,p =.75)
trainingdata <- training[inData,]
View(trainingnames)
inData <- createDataPartition(training$classe, times = 1,p =.75, list = FALSE)
trainingdata <- actualtraining[inData,]
testingdata <- actualtraining[-inData,]
mod1 <- train(classe~., method = "rf", data= trainingdata)
prediction <- predict(mod1, testingdata)
confusionMatrix(prediction, testingdata$classe)
mod2 <- train(classe~., data = trainingdata, method="lda")
prediciton2 <- predcit(mod2, testingdata)
prediciton2 <- predict(mod2, testingdata)
confusionMatrix(prediction2, testingdata$classe)
confusionMatrix(prediciton2, testingdata$classe)
trainingdata2 <- training[inData,]
testingdata2<- training[-inData,]
mod3 <- train(classe~., data = trainingdata2, method = "rf")
mod3 <- train(classe~., data= trainingdata, method ="rpart")
prediction3 <- predict(mod3, testingdata)
confusionMatrix(prediction3, testingdata$classe)
mod4 <- train(classe~., data = trainingdata, method = "nb")
mod4 <- train(classe~., data = trainingdata, method = "nb")
prediction4 <- predict(mod4, testingdata)
confusionMatrix(prediction4, testingdata$classe)
confusionMatrix(mod1, trainingdata$classe)
confusionMatrix(prediction, testingdata$classe)
mod5 <- train(y~., data=actualtraining, method = "ada")
mod5 <- train(classe~., data=actualtraining, method = "ada")
mod5 <- train(classe~., data=actualtraining, method = "ada")
mod5 <- train(y~., data=actualtraining, method = "ada")
mod5 <- train(classe~., data=actualtraining, method = "ada")
mod5 <- train(classe~., data=trainingdata, method = "ada")
plot(testingdata)
plot(classe~., testingdata)
qplot(classe~., data=testingdata)
?qplot
qplot(y=classe, x=testingdata[,-c(1))
qplot(y=classe, x=testingdata[,-c(1)])
qplot(y=classe, x=testingdata[,-c(1)], data=testingdata)
qplot(y=classe, x=accel_belt_z, data=testingdata)
qplot(y=classe, x=accel_arm_z, data=testingdata)
qplot(y=classe, x=accel_arm_y, data=testingdata)
qplot(y=classe, x=accel_forearm_y, data=testingdata)
qplot(y=classe, x=accel_forearm_z, data=testingdata)
featurePlot(x=testingdata[,c(2:9)],y=testingdata$classe, plot="pairs")
?featurePlot
featurePlot(x=testingdata[,c(2:9)],y=testingdata$classe, plot="box")
featurePlot(x=testingdata[,c(2:9)],y=testingdata$classe, plot="density")
featurePlot(x=testingdata[,c(2:9)],y=testingdata$classe, plot="ellipse")
featurePlot(x=testingdata[,c(2:9)],y=testingdata$classe, plot="strip")
featurePlot(x=testingdata[,c(2:9)],y=testingdata$classe, plot="scatter")
set.seed(457)
mod1 <- train(classe~., data=actualtraining, method="rf")
